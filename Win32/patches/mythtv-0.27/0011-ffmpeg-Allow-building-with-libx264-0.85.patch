From 0f727677cda8b6b5dd904d301408dc5efb957703 Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Thu, 17 May 2012 17:07:00 +0200
Subject: [PATCH 011/207] ffmpeg: Allow building with libx264 >= 0.85

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/configure                            |    4 ++--
 mythtv/external/FFmpeg/libavcodec/libx264.c |    8 ++++++++
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/mythtv/configure b/mythtv/configure
index b49e511..976371c 100755
--- a/mythtv/configure
+++ b/mythtv/configure
@@ -5045,8 +5045,8 @@ enabled libvpx     && {
     enabled libvpx_vp9_decoder && { check_lib2 "vpx/vpx_decoder.h vpx/vp8dx.h" "vpx_codec_vp9_dx" -lvpx || disable libvpx_vp9_decoder;  }
     enabled libvpx_vp9_encoder && { check_lib2 "vpx/vpx_encoder.h vpx/vp8cx.h" "vpx_codec_vp9_cx" -lvpx || disable libvpx_vp9_encoder; } }
 enabled libx264    && require  libx264 x264.h x264_encoder_encode -lx264 &&
-                      { check_cpp_condition x264.h "X264_BUILD >= 118" ||
-                        die "ERROR: libx264 must be installed and version must be >= 0.118."; }
+                      { check_cpp_condition x264.h "X264_BUILD >= 85" ||
+                        die "ERROR: libx264 must be installed and version must be >= 0.85."; }
 enabled libxavs    && require  libxavs xavs.h xavs_encoder_encode -lxavs
 enabled libxvid    && require  libxvid xvid.h xvid_global -lxvidcore
 enabled openal     && { { for al_libs in "${OPENAL_LIBS}" "-lopenal" "-lOpenAL32"; do
diff --git a/mythtv/external/FFmpeg/libavcodec/libx264.c b/mythtv/external/FFmpeg/libavcodec/libx264.c
index 7e8fa65..fadc637 100644
--- a/mythtv/external/FFmpeg/libavcodec/libx264.c
+++ b/mythtv/external/FFmpeg/libavcodec/libx264.c
@@ -255,11 +255,15 @@ static int convert_pix_fmt(enum AVPixelFormat pix_fmt)
     case AV_PIX_FMT_YUVJ420P:
     case AV_PIX_FMT_YUV420P9:
     case AV_PIX_FMT_YUV420P10: return X264_CSP_I420;
+#ifdef X264_CSP_I422
     case AV_PIX_FMT_YUV422P:
     case AV_PIX_FMT_YUV422P10: return X264_CSP_I422;
+#endif
+#ifdef X264_CSP_I444
     case AV_PIX_FMT_YUV444P:
     case AV_PIX_FMT_YUV444P9:
     case AV_PIX_FMT_YUV444P10: return X264_CSP_I444;
+#endif
 #ifdef X264_CSP_BGR
     case AV_PIX_FMT_BGR24:
         return X264_CSP_BGR;
@@ -516,7 +520,9 @@ static av_cold int X264_init(AVCodecContext *avctx)
 
     x4->params.b_interlaced   = avctx->flags & CODEC_FLAG_INTERLACED_DCT;
 
+#if X264_BUILD >= 118
     x4->params.b_open_gop     = !(avctx->flags & CODEC_FLAG_CLOSED_GOP);
+#endif
 
     x4->params.i_slice_count  = avctx->slices;
 
@@ -642,7 +648,9 @@ static const AVOption options[] = {
     { "weightb",       "Weighted prediction for B-frames.",               OFFSET(weightb),       AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, 1, VE },
     { "weightp",       "Weighted prediction analysis method.",            OFFSET(weightp),       AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, VE, "weightp" },
     { "none",          NULL, 0, AV_OPT_TYPE_CONST, {.i64 = X264_WEIGHTP_NONE},   INT_MIN, INT_MAX, VE, "weightp" },
+#ifdef X264_WEIGHTP_SIMPLE
     { "simple",        NULL, 0, AV_OPT_TYPE_CONST, {.i64 = X264_WEIGHTP_SIMPLE}, INT_MIN, INT_MAX, VE, "weightp" },
+#endif
     { "smart",         NULL, 0, AV_OPT_TYPE_CONST, {.i64 = X264_WEIGHTP_SMART},  INT_MIN, INT_MAX, VE, "weightp" },
     { "ssim",          "Calculate and print SSIM stats.",                 OFFSET(ssim),          AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, 1, VE },
     { "intra-refresh", "Use Periodic Intra Refresh instead of IDR frames.",OFFSET(intra_refresh),AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, 1, VE },
-- 
1.7.9.5

