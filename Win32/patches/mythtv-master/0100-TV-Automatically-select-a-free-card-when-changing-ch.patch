From 0bf8e2fd4ffaeb359d7f50e92cd14b4c720cd739 Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Wed, 8 Feb 2012 18:53:57 +0100
Subject: [PATCH 100/202] TV: Automatically select a free card when changing
 channel

This patch fixes a shortcoming in TV::ChangeChannel which presently doesn't
detect when the new channel is unavialable on the current card due to
a current recording or other other LiveTV access.  When the channel change
is sent to the backend it detects the conflict and selects a different
channel to view even when there are cards availab le that could receive
the requested channel.

This patch checks the current card for conflicts and switches to the next
available card that can receive the channel.  It has most utility in
systems with multiple tuners.

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmythtv/tv_play.cpp      |   66 +++++++++++++++-----------------
 mythtv/libs/libmythtv/tvremoteutil.cpp |   60 +++++++++++++++++++++++++++++
 mythtv/libs/libmythtv/tvremoteutil.h   |    2 +
 3 files changed, 93 insertions(+), 35 deletions(-)

diff --git a/mythtv/libs/libmythtv/tv_play.cpp b/mythtv/libs/libmythtv/tv_play.cpp
index 2200b58..5742668 100644
--- a/mythtv/libs/libmythtv/tv_play.cpp
+++ b/mythtv/libs/libmythtv/tv_play.cpp
@@ -2266,25 +2266,23 @@ void TV::HandleStateChange(PlayerContext *mctx, PlayerContext *ctx)
             bool getit = ctx->recorder->ShouldSwitchToAnotherCard(
                 QString::number(chanid));
 
-            if (getit)
-                reclist = ChannelUtil::GetValidRecorderList(chanid, channum);
+            if (!getit)
+                getit = !RemoteIsTuneable(ctx->GetCardID(), chanid);
 
-            if (reclist.size())
+            if (getit)
             {
-                RemoteEncoder *testrec = NULL;
-                vector<uint> excluded_cardids;
-                testrec = RemoteRequestFreeRecorderFromList(reclist,
-                                                            excluded_cardids);
+                RemoteEncoder *testrec = RemoteRequestFreeRecorder(chanid);
                 if (testrec && testrec->IsValidRecorder())
                 {
                     ctx->SetRecorder(testrec);
                     ctx->recorder->Setup();
                 }
                 else
+		{
+                    chanid = 0;
                     delete testrec; // If testrec isn't a valid recorder ...
+		}
             }
-            else if (getit)
-                chanid = 0;
         }
 
         LOG(VB_GENERAL, LOG_NOTICE, LOC + "Spawning LiveTV Recorder -- begin");
@@ -6988,26 +6986,24 @@ void TV::SwitchCards(PlayerContext *ctx,
     }
 
     uint input_cardid = 0;
-    QStringList reclist;
     if (inputid)
     {
         // If we are switching to a specific input..
         input_cardid = CardUtil::GetCardID(inputid);
+        QStringList reclist;
         if (input_cardid)
+        {
             reclist.push_back(QString::number(input_cardid));
+            vector<uint> excluded_cardids;
+            excluded_cardids.push_back(ctx->GetCardID());
+            testrec = RemoteRequestFreeRecorderFromList(reclist, excluded_cardids);
+        }
     }
     else if (chanid || !channum.isEmpty())
     {
         // If we are switching to a channel not on the current recorder
         // we need to find the next free recorder with that channel.
-        reclist = ChannelUtil::GetValidRecorderList(chanid, channum);
-    }
-
-    if (!reclist.empty())
-    {
-        vector<uint> excluded_cardids;
-        excluded_cardids.push_back(ctx->GetCardID());
-        testrec = RemoteRequestFreeRecorderFromList(reclist, excluded_cardids);
+        testrec = RemoteRequestFreeRecorder(chanid, channum);
     }
 
     if (testrec && testrec->IsValidRecorder())
@@ -7582,18 +7578,14 @@ void TV::ChangeChannel(PlayerContext *ctx, uint chanid, const QString &chan)
         channum = ChannelUtil::GetChanNum(chanid);
     }
 
-    bool getit = false;
-    if (ctx->recorder)
+    bool getit = true;
+    if (ctx->pseudoLiveTVState == kPseudoRecording)
+        ;
+    else if (ctx->pseudoLiveTVState == kPseudoChangeChannel)
+        getit = false;
+    else if (ctx->recorder)
     {
-        if (kPseudoChangeChannel == ctx->pseudoLiveTVState)
-        {
-            getit = false;
-        }
-        else if (kPseudoRecording == ctx->pseudoLiveTVState)
-        {
-            getit = true;
-        }
-        else if (chanid)
+        if (chanid)
         {
             tunable_on = IsTunableOn(ctx, chanid, true, false);
             getit = !tunable_on.contains(ctx->GetCardID());
@@ -7604,7 +7596,6 @@ void TV::ChangeChannel(PlayerContext *ctx, uint chanid, const QString &chan)
             uint pref_cardid;
             uint cardid = ctx->GetCardID();
             bool dummy;
-
             ctx->recorder->CheckChannelPrefix(chan,  pref_cardid,
                                               dummy, needed_spacer);
 
@@ -7628,6 +7619,11 @@ void TV::ChangeChannel(PlayerContext *ctx, uint chanid, const QString &chan)
             }
         }
 
+        // If the channel is available on the current card then check for
+        // conflicts in case a common input group restricts tuning
+        if (!getit)
+            getit = !RemoteIsTuneable(ctx->GetCardID(), chanid, channum);
+
         if (getit)
         {
             QStringList tmp =
@@ -7647,12 +7643,12 @@ void TV::ChangeChannel(PlayerContext *ctx, uint chanid, const QString &chan)
         }
     }
 
-    if (reclist.size())
+    if (getit)
     {
-        RemoteEncoder *testrec = NULL;
-        vector<uint> excluded_cardids;
-        excluded_cardids.push_back(ctx->GetCardID());
-        testrec = RemoteRequestFreeRecorderFromList(reclist, excluded_cardids);
+        if (!ctx->recorder->CheckChannel(channum))
+            return;
+
+        RemoteEncoder *testrec = RemoteRequestFreeRecorder(chanid, channum);
         if (!testrec || !testrec->IsValidRecorder())
         {
             ClearInputQueues(ctx, true);
diff --git a/mythtv/libs/libmythtv/tvremoteutil.cpp b/mythtv/libs/libmythtv/tvremoteutil.cpp
index eb46191..292f3c0 100644
--- a/mythtv/libs/libmythtv/tvremoteutil.cpp
+++ b/mythtv/libs/libmythtv/tvremoteutil.cpp
@@ -4,6 +4,7 @@
 
 #include "tvremoteutil.h"
 #include "cardutil.h"
+#include "channelutil.h"
 #include "inputinfo.h"
 #include "programinfo.h"
 #include "mythcorecontext.h"
@@ -422,4 +423,63 @@ bool RemoteGetRecordingStatus(
     return isRecording;
 }
 
+bool RemoteIsTuneable(uint cardid, uint chanid, const QString &channum)
+{
+    if (!chanid)
+    {
+        vector<uint> c = ChannelUtil::GetConflicting(channum);
+        if (c.size() == 0)
+            return false;
+        chanid = c[0];
+    }
+
+    const uint mplexid = ChannelUtil::GetMplexID(chanid);
+    const uint sourceid = ChannelUtil::GetSourceIDForChannel(chanid);
+    QStringList const inputs = CardUtil::GetInputNames(cardid, sourceid);
+    if (inputs.size() == 0)
+        return false;
+    const uint inputid = CardUtil::GetInputID(cardid, inputs[0]);
+
+    // Enumerate cards with the same inputgroup
+    vector<uint> const cards = CardUtil::GetConflictingCards(inputid, cardid);
+    for (vector<uint>::const_iterator it = cards.begin();
+        it != cards.end(); ++it)
+    {
+        // Check if card is busy
+        TunedInputInfo busy_input;
+        if (!RemoteIsBusy(*it, busy_input))
+            continue;
+
+        // Check for conflicting source and multiplex IDs
+        if (busy_input.mplexid != mplexid || busy_input.sourceid != sourceid)
+            return false;
+    }
+
+    return true;
+}
+
+RemoteEncoder *RemoteRequestFreeRecorder(uint chanid, const QString &channum)
+{
+    QStringList strlist( "GET_FREE_RECORDER_LIST" );
+
+    if (!gCoreContext->SendReceiveStringList(strlist, true))
+        return NULL;
+
+    QStringList reclist = ChannelUtil::GetValidRecorderList(chanid, channum);
+    for (QStringList::const_iterator recIter = reclist.begin();
+         recIter != reclist.end(); ++recIter)
+    {
+        if (strlist.contains(*recIter))
+        {
+            RemoteEncoder *rec = RemoteGetExistingRecorder((*recIter).toInt());
+            if (rec && RemoteIsTuneable(rec->GetRecorderNumber(), chanid, channum))
+                return rec;
+
+            delete rec;
+        }
+    }
+    // didn't find anything. just return NULL.
+    return NULL;
+}
+
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/libs/libmythtv/tvremoteutil.h b/mythtv/libs/libmythtv/tvremoteutil.h
index 1a4af11..03bb30c 100644
--- a/mythtv/libs/libmythtv/tvremoteutil.h
+++ b/mythtv/libs/libmythtv/tvremoteutil.h
@@ -47,6 +47,8 @@ MTV_PUBLIC vector<InputInfo> RemoteRequestFreeInputList(
     uint cardid, const vector<uint> &excluded_cardids);
 MTV_PUBLIC InputInfo RemoteRequestBusyInputID(uint cardid);
 MTV_PUBLIC bool RemoteIsBusy(uint cardid, TunedInputInfo &busy_input);
+MTV_PUBLIC bool RemoteIsTuneable(uint cardid, uint chanid, const QString &channum = QString());
+MTV_PUBLIC RemoteEncoder *RemoteRequestFreeRecorder(uint chanid, const QString &channum = QString());
 
 MTV_PUBLIC bool RemoteGetRecordingStatus(
     vector<TunerStatus> *tunerList = NULL, bool list_inactive = false);
-- 
1.7.9.5

