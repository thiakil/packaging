From c253522febb31be0b64aa17e7b2dde0de2474091 Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Tue, 25 Jun 2013 14:56:43 +0100
Subject: [PATCH 235/285] MHEG: Cache database lookups in GetChannelIndex

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmythtv/mhi.cpp |  114 +++++++++++++++++++++++++----------------
 mythtv/libs/libmythtv/mhi.h   |   13 +++++
 2 files changed, 83 insertions(+), 44 deletions(-)

diff --git a/mythtv/libs/libmythtv/mhi.cpp b/mythtv/libs/libmythtv/mhi.cpp
index 6ab8911..a60d599 100644
--- a/mythtv/libs/libmythtv/mhi.cpp
+++ b/mythtv/libs/libmythtv/mhi.cpp
@@ -166,7 +166,12 @@ void MHIContext::Restart(uint chanid, uint sourceid, bool isLive)
         .arg((int)chanid).arg((int)sourceid).arg(isLive).arg(tuneinfo,0,16)
         .arg((quintptr)this,0,16) );
 
-    m_currentSource = sourceid;
+    if (m_currentSource != (int)sourceid)
+    {
+        m_currentSource = sourceid;
+        QMutexLocker locker(&m_channelMutex);
+        m_channelCache.clear();
+    }
     m_currentStream = (chanid) ? (int)chanid : -1;
     if (!(tuneinfo & kTuneKeepChnl))
         m_currentChannel = m_currentStream;
@@ -780,6 +785,34 @@ void MHIContext::DrawVideo(const QRect &videoRect, const QRect &dispRect)
     }
 }
 
+// Caller must hold m_channelMutex
+bool MHIContext::LoadChannelCache()
+{
+    MSqlQuery query(MSqlQuery::InitCon());
+    query.prepare(
+        "SELECT networkid, serviceid, transportid, chanid "
+        "FROM channel, dtv_multiplex "
+        "WHERE channel.mplexid  = dtv_multiplex.mplexid "
+        "  AND channel.sourceid = dtv_multiplex.sourceid "
+        "  AND channel.sourceid = :SOURCEID ;" );
+    query.bindValue(":SOURCEID", m_currentSource);
+    if (!query.exec())
+    {
+        MythDB::DBError("MHIContext::LoadChannelCache", query);
+        return false;
+    }
+    else if (!query.isActive())
+        return false;
+    else while (query.next())
+    {
+        int nid = query.value(0).toInt();
+        int sid = query.value(1).toInt();
+        int tid = query.value(2).toInt();
+        int cid = query.value(3).toInt();
+        m_channelCache.insertMulti( Key_t(nid, sid), Val_t(tid, cid) );
+    }
+    return true;
+}
 
 // Tuning.  Get the index corresponding to a given channel.
 // The format of the service is dvb://netID.[transPortID].serviceID
@@ -794,7 +827,6 @@ int MHIContext::GetChannelIndex(const QString &str)
     do if (str.startsWith("dvb://"))
     {
         QStringList list = str.mid(6).split('.');
-        MSqlQuery query(MSqlQuery::InitCon());
         if (list.size() != 3)
             break; // Malformed.
         // The various fields are expressed in hexadecimal.
@@ -803,40 +835,32 @@ int MHIContext::GetChannelIndex(const QString &str)
         int netID = list[0].toInt(&ok, 16);
         if (!ok)
             break;
+        int transportID = !list[1].isEmpty() ? list[1].toInt(&ok, 16) : -1;
+        if (!ok)
+            break;
         int serviceID = list[2].toInt(&ok, 16);
         if (!ok)
             break;
-        // We only return channels that match the current capture source.
-        if (list[1].isEmpty()) // TransportID is not specified
-        {
-            query.prepare(
-                "SELECT chanid "
-                "FROM channel, dtv_multiplex "
-                "WHERE networkid        = :NETID AND"
-                "      channel.mplexid  = dtv_multiplex.mplexid AND "
-                "      serviceid        = :SERVICEID AND "
-                "      channel.sourceid = :SOURCEID");
-        }
-        else
+
+        QMutexLocker locker(&m_channelMutex);
+        if (m_channelCache.isEmpty())
+            LoadChannelCache();
+
+        ChannelCache_t::const_iterator it = m_channelCache.find(
+            Key_t(netID,serviceID) );
+        if (it == m_channelCache.end())
+            break;
+        else if (transportID < 0)
+            nResult = Cid(it);
+        else do
         {
-            int transportID = list[1].toInt(&ok, 16);
-            if (!ok)
+            if (Tid(it) == transportID)
+            {
+                nResult = Cid(it);
                 break;
-            query.prepare(
-                "SELECT chanid "
-                "FROM channel, dtv_multiplex "
-                "WHERE networkid        = :NETID AND"
-                "      channel.mplexid  = dtv_multiplex.mplexid AND "
-                "      serviceid        = :SERVICEID AND "
-                "      transportid      = :TRANSID AND "
-                "      channel.sourceid = :SOURCEID");
-            query.bindValue(":TRANSID", transportID);
+            }
         }
-        query.bindValue(":NETID", netID);
-        query.bindValue(":SERVICEID", serviceID);
-        query.bindValue(":SOURCEID", m_currentSource);
-        if (query.exec() && query.isActive() && query.next())
-            nResult = query.value(0).toInt();
+        while (++it != m_channelCache.end());
     }
     else if (str.startsWith("rec://svc/lcn/"))
     {
@@ -872,21 +896,23 @@ int MHIContext::GetChannelIndex(const QString &str)
 bool MHIContext::GetServiceInfo(int channelId, int &netId, int &origNetId,
                                 int &transportId, int &serviceId)
 {
-    MSqlQuery query(MSqlQuery::InitCon());
-    query.prepare("SELECT networkid, transportid, serviceid "
-                  "FROM channel, dtv_multiplex "
-                  "WHERE chanid           = :CHANID AND "
-                  "      channel.mplexid  = dtv_multiplex.mplexid");
-    query.bindValue(":CHANID", channelId);
-    if (query.exec() && query.isActive() && query.next())
+    QMutexLocker locker(&m_channelMutex);
+    if (m_channelCache.isEmpty())
+        LoadChannelCache();
+
+    for ( ChannelCache_t::const_iterator it = m_channelCache.begin();
+        it != m_channelCache.end(); ++it)
     {
-        netId = query.value(0).toInt();
-        origNetId = netId; // We don't have this in the database.
-        transportId = query.value(1).toInt();
-        serviceId = query.value(2).toInt();
-        VERBOSE(VB_MHEG, QString("[mhi] GetServiceInfo %1 => NID=%2 TID=%3 SID=%4")
-            .arg(channelId).arg(netId).arg(transportId).arg(serviceId));
-        return true;
+        if (Cid(it) == channelId)
+        {
+            transportId = Tid(it);
+            netId = Nid(it);
+            origNetId = netId; // We don't have this in the database.
+            serviceId = Sid(it);
+            VERBOSE(VB_MHEG, QString("[mhi] GetServiceInfo %1 => NID=%2 TID=%3 SID=%4")
+                .arg(channelId).arg(netId).arg(transportId).arg(serviceId));
+            return true;
+        }
     }
 
     VERBOSE(VB_IMPORTANT, QString("[mhi] WARN GetServiceInfo %1 failed").arg(channelId));
diff --git a/mythtv/libs/libmythtv/mhi.h b/mythtv/libs/libmythtv/mhi.h
index ec586f1..4fb8ced 100644
--- a/mythtv/libs/libmythtv/mhi.h
+++ b/mythtv/libs/libmythtv/mhi.h
@@ -21,6 +21,7 @@ using namespace std;
 #include <QList>
 #include <QRect>
 #include <QPoint>
+#include <QPair>
 
 // MythTV headers
 #include "../libmythfreemheg/freemheg.h"
@@ -169,6 +170,7 @@ class MHIContext : public MHContext
     void NetworkBootRequested(void);
     void ClearDisplay(void);
     void ClearQueue(void);
+    bool LoadChannelCache();
 
     InteractiveTV   *m_parent;
 
@@ -213,6 +215,17 @@ class MHIContext : public MHContext
 
     QRect            m_videoRect, m_videoDisplayRect;
     QRect            m_displayRect;
+
+    // Channel index database cache
+    typedef QPair< int, int > Val_t; // transportid, chanid
+    typedef QPair< int, int > Key_t; // networkid, serviceid
+    typedef QMap< Key_t, Val_t > ChannelCache_t;
+    ChannelCache_t  m_channelCache;
+    QMutex          m_channelMutex;
+    static inline int Tid(ChannelCache_t::const_iterator it) { return it->first; }
+    static inline int Cid(ChannelCache_t::const_iterator it) { return it->second; }
+    static inline int Nid(ChannelCache_t::const_iterator it) { return it.key().first; }
+    static inline int Sid(ChannelCache_t::const_iterator it) { return it.key().second; }
 };
 
 // Object for drawing text.
-- 
1.7.9.5

