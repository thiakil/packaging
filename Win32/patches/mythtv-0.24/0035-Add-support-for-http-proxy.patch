From 1ffdbfe3f35c26c681df31c229c2f36152ee857b Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Wed, 18 May 2011 17:25:13 +0200
Subject: [PATCH 035/285] Add support for http proxy

This patch parses the http_proxy environment variable to set a proxy for all
http comms using Qt.

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmyth/util.cpp          |  123 +++++++++++++++++++++++++++++++++
 mythtv/libs/libmyth/util.h            |    2 +
 mythtv/programs/mythbackend/main.cpp  |    3 +
 mythtv/programs/mythfrontend/main.cpp |    2 +
 4 files changed, 130 insertions(+)

diff --git a/mythtv/libs/libmyth/util.cpp b/mythtv/libs/libmyth/util.cpp
index c5358b0..1611c66 100644
--- a/mythtv/libs/libmyth/util.cpp
+++ b/mythtv/libs/libmyth/util.cpp
@@ -37,6 +37,8 @@ using namespace std;
 #include <QFile>
 #include <QDir>
 #include <QFileInfo>
+#include <QUrl>
+#include <QNetworkProxy>
 
 // Myth headers
 #include "mythcorecontext.h"
@@ -1247,4 +1249,125 @@ bool myth_FileIsBD(const QString &filename)
     return false;
 }
 
+/**
+ * \brief Get network proxy settings from OS, and use for [Q]Http[Comms]
+ *
+ * The HTTP_PROXY environment var. is parsed for values like; "proxy-host",
+ * "proxy-host:8080", "http://host:8080" and "http"//user:password@host:1080",
+ * and that is used for any Qt-based Http fetches.
+ * We also test connectivity here with ping and telnet, and warn if it fails.
+ *
+ * If there is was no env. var, we use Qt to get proxy settings from the OS,
+ * and search through them for a proxy server we can connect to.
+ */
+
+void setHttpProxy(void)
+{
+    QString       LOC = "setHttpProxy() - ";
+    QNetworkProxy p;
+
+    // Set http proxy for the application if specified in environment variable
+    QString var(getenv("http_proxy"));
+    if (var.isEmpty())
+        var = getenv("HTTP_PROXY");  // Sadly, some OS envs are case sensitive
+    if (var.length())
+    {
+        QUrl    url  = QUrl(var, QUrl::TolerantMode);
+        QString host = url.host();
+        int     port = url.port();
+
+        if (port == -1)   // Parsing error
+        {
+            port = 0;   // The default when creating a QNetworkProxy
+
+            if (telnet(host, 1080))  // Socks?
+                port = 1080;
+            if (telnet(host, 3128))  // Squid
+                port = 3128;
+            if (telnet(host, 8080))  // MS ISA
+                port = 8080;
+
+            VERBOSE(VB_NETWORK, (LOC + "assuming port %1 on host %2")
+                                .arg(port).arg(host));
+            url.setPort(port);
+        }
+        else if (!ping(host, 1))
+            VERBOSE(VB_IMPORTANT,
+                    (LOC + "cannot locate host %1").arg(host) +
+                    "\n\t\t\tPlease check HTTP_PROXY environment variable!");
+        else if (!telnet(host,port))
+            VERBOSE(VB_IMPORTANT,
+                    (LOC + "%1:%2 - cannot connect!").arg(host).arg(port) +
+                    "\n\t\t\tPlease check HTTP_PROXY environment variable!");
+
+#if 0
+        VERBOSE(VB_NETWORK, (LOC + "using http://%1:%2@%3:%4")
+                            .arg(url.userName()).arg(url.password())
+                            .arg(host).arg(port));
+#endif
+        const QNetworkProxy::ProxyType type =
+            url.scheme().isEmpty() ? QNetworkProxy::HttpProxy :
+            url.scheme() == "socks" ? QNetworkProxy::Socks5Proxy :
+            url.scheme() == "http" ? QNetworkProxy::HttpProxy :
+            url.scheme() == "cache" ? QNetworkProxy::HttpCachingProxy :
+            url.scheme() == "ftp" ? QNetworkProxy::FtpCachingProxy :
+            QNetworkProxy::NoProxy;
+        if (QNetworkProxy::NoProxy == type)
+        {
+            VERBOSE(VB_IMPORTANT, LOC + QString("Unknown proxy type %1").arg(var) );
+            return;
+        }
+
+        p = QNetworkProxy(type, host, port, url.userName(), url.password());
+        QNetworkProxy::setApplicationProxy(p);
+        return;
+    }
+
+    VERBOSE(VB_NETWORK, LOC + "no HTTP_PROXY environment var.");
+
+    // Use Qt to look for user proxy settings stored by the OS or browser:
+
+    QList<QNetworkProxy> proxies;
+    QNetworkProxyQuery   query(QUrl("http://www.mythtv.org"));
+
+    proxies = QNetworkProxyFactory::systemProxyForQuery(query);
+
+    Q_FOREACH (p, proxies)
+    {
+        QString host = p.hostName();
+        int     port = p.port();
+
+        if (p.type() == QNetworkProxy::NoProxy)
+            continue;
+
+        if (!telnet(host, port))
+        {
+            VERBOSE(VB_NETWORK, (LOC + "failed to contact proxy host ") + host);
+            continue;
+        }
+
+        VERBOSE(VB_NETWORK, (LOC + "using proxy host %1:%2")
+                            .arg(host).arg(port));
+        QNetworkProxy::setApplicationProxy(p);
+
+        // Allow sub-commands to use this proxy
+        // via myth_system(command), by setting HTTP_PROXY
+        QString url;
+
+        if (p.user().length())
+            url = "http://%1:%2@%3:%4",
+            url = url.arg(p.user()).arg(p.password());
+        else
+            url = "http://%1:%2";
+
+        url = url.arg(p.hostName()).arg(p.port());
+        setenv("HTTP_PROXY", url.toAscii(), 1);
+        setenv("http_proxy", url.toAscii(), 0);
+
+        return;
+    }
+
+    VERBOSE(VB_NETWORK, LOC + "failed to find a network proxy");
+}
+
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/libs/libmyth/util.h b/mythtv/libs/libmyth/util.h
index c126660..fa3fb54 100644
--- a/mythtv/libs/libmyth/util.h
+++ b/mythtv/libs/libmyth/util.h
@@ -85,6 +85,8 @@ MPUBLIC void myth_yield(void);
 MPUBLIC bool myth_FileIsDVD(const QString &filename);
 MPUBLIC bool myth_FileIsBD(const QString &filename);
 
+MPUBLIC void setHttpProxy(void);
+
 // CPU Tick timing function
 #ifdef MMX
 #ifdef _WIN32
diff --git a/mythtv/programs/mythbackend/main.cpp b/mythtv/programs/mythbackend/main.cpp
index 0e424c3..287279b 100644
--- a/mythtv/programs/mythbackend/main.cpp
+++ b/mythtv/programs/mythbackend/main.cpp
@@ -53,6 +53,7 @@ using namespace std;
 #include "jobqueue.h"
 #include "mythcommandlineparser.h"
 #include "mythsystemevent.h"
+#include "util.h"
 
 #include "backendcontext.h"
 #include "main_helpers.h"
@@ -169,6 +170,8 @@ int main(int argc, char **argv)
         VERBOSE(VB_IMPORTANT, versionStr);
     }
 
+    setHttpProxy();
+
     gContext = new MythContext(MYTH_BINARY_VERSION);
     gCoreContext->SetAppName(binname);
 
diff --git a/mythtv/programs/mythfrontend/main.cpp b/mythtv/programs/mythfrontend/main.cpp
index 0335dda..b15ef77 100644
--- a/mythtv/programs/mythfrontend/main.cpp
+++ b/mythtv/programs/mythfrontend/main.cpp
@@ -1409,6 +1409,8 @@ int main(int argc, char **argv)
 
     CleanupMyOldInUsePrograms();
 
+    setHttpProxy();
+
     MythPluginManager *pmanager = new MythPluginManager();
     gContext->SetPluginManager(pmanager);
 
-- 
1.7.9.5

