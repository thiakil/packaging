From d303aed4866882814ad28f66acf9807289708da0 Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Mon, 18 Jul 2011 20:33:56 +0200
Subject: [PATCH 051/285] DownloadManager: Fix error signal, user-agent & data
 corruption

This patch fixes 3 problems

- The QNetworkReply::NetworkError type is not registered by the Qt 4.7 lib
 so clients cant receive error() signals
- The user agent is overwritten by downloadManager. This fix checks if the
 caller has provided a user-agent string.
- If a request times out the caller's data buffer can be overwritten when
 the request finally terminates.

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmythdb/mythdownloadmanager.cpp |   27 ++++++++++++++++---------
 1 file changed, 18 insertions(+), 9 deletions(-)

diff --git a/mythtv/libs/libmythdb/mythdownloadmanager.cpp b/mythtv/libs/libmythdb/mythdownloadmanager.cpp
index 8d43c49..5890291 100644
--- a/mythtv/libs/libmythdb/mythdownloadmanager.cpp
+++ b/mythtv/libs/libmythdb/mythdownloadmanager.cpp
@@ -5,6 +5,8 @@
 #include <QFile>
 #include <QDir>
 #include <QThreadPool>
+#include <QNetworkCacheMetaData>
+#include <QMetaType> // qRegisterMetaType
 
 #include <unistd.h>
 
@@ -162,7 +164,11 @@ MythDownloadManager::MythDownloadManager() :
     m_runThread(false),
     m_isRunning(false)
 {
+    // This ought to be done by the Qt lib but isn't in 4.7
+    // Needed to receive QNetworkReply::error(QNetworkReply::NetworkError)
+    qRegisterMetaType< QNetworkReply::NetworkError >();
 }
+Q_DECLARE_METATYPE(QNetworkReply::NetworkError)
 
 /** \fn MythDownloadManager::~MythDownloadManager()
  *  \brief Destructor for MythDownloadManager.
@@ -597,8 +603,9 @@ void MythDownloadManager::downloadQNetworkRequest(MythDownloadInfo *dlInfo)
         request.setAttribute(QNetworkRequest::CacheLoadControlAttribute,
                              QNetworkRequest::PreferCache);
 
-    request.setRawHeader("User-Agent",
-                         "MythDownloadManager v" MYTH_BINARY_VERSION);
+    if (!request.hasRawHeader("User-Agent"))
+        request.setRawHeader("User-Agent",
+                             "MythDownloadManager v" MYTH_BINARY_VERSION);
 
     if (dlInfo->m_post)
         dlInfo->m_reply = m_manager->post(request, *dlInfo->m_data);
@@ -655,6 +662,7 @@ bool MythDownloadManager::downloadNow(MythDownloadInfo *dlInfo, bool deleteInfo)
     {
         dlInfo->m_data = NULL;      // Prevent downloadFinished() from updating
         dlInfo->m_syncMode = false; // Let downloadFinished() cleanup for us
+        dlInfo->m_data = 0; // !! Otherwise downloadFinished will write to this
         if (dlInfo->m_reply)
             dlInfo->m_reply->abort();
     }
@@ -701,9 +709,9 @@ void MythDownloadManager::downloadError(QNetworkReply::NetworkError errorCode)
 {
     QNetworkReply *reply = (QNetworkReply*)sender();
 
-    VERBOSE(VB_FILE+VB_EXTRA, LOC +
-            QString("downloadError(%1) (for reply %2)")
-                    .arg(errorCode).arg((long long)reply));
+    // NB The errorString includes the URL
+    VERBOSE(VB_FILE, LOC + QString("downloadError %1 ")
+        .arg(errorCode) + reply->errorString() );
 
     QMutexLocker locker(m_infoLock);
     if (!m_downloadReplies.contains(reply))
@@ -792,8 +800,9 @@ void MythDownloadManager::downloadFinished(MythDownloadInfo *dlInfo)
         if (dlInfo->m_preferCache)
             request.setAttribute(QNetworkRequest::CacheLoadControlAttribute,
                                  QNetworkRequest::PreferCache);
-        request.setRawHeader("User-Agent",
-                             "MythDownloadManager v" MYTH_BINARY_VERSION);
+        if (!request.hasRawHeader("User-Agent"))
+            request.setRawHeader("User-Agent",
+                                 "MythDownloadManager v" MYTH_BINARY_VERSION);
 
         if (dlInfo->m_post)
             dlInfo->m_reply = m_manager->post(request, *dlInfo->m_data);
@@ -880,8 +889,8 @@ void MythDownloadManager::downloadFinished(MythDownloadInfo *dlInfo)
                 args << dlInfo->m_url;
                 args << dlInfo->m_outFile;
                 args << QString::number(dlInfo->m_bytesTotal);
-                args << QString();  // placeholder for error string
-                args << QString::number((int)dlInfo->m_errorCode);
+                args << (reply ? reply->errorString() : QString());  // placeholder for error string
+                args << QString::number((int)(reply ? reply->error() : dlInfo->m_errorCode));
 
                 QCoreApplication::postEvent(dlInfo->m_caller,
                     new MythEvent("DOWNLOAD_FILE FINISHED", args));
-- 
1.7.9.5

