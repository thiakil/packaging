From 418ccdea78f1476a8e404ee066b8e3ab7254d41a Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Thu, 18 Apr 2013 19:32:50 +0100
Subject: [PATCH 181/285] mythbackend: Add server command to query connected
 clients

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/programs/mythbackend/filetransfer.cpp |    7 +++-
 mythtv/programs/mythbackend/filetransfer.h   |    2 ++
 mythtv/programs/mythbackend/mainserver.cpp   |   44 ++++++++++++++++++++++++++
 mythtv/programs/mythbackend/mainserver.h     |    1 +
 4 files changed, 53 insertions(+), 1 deletion(-)

diff --git a/mythtv/programs/mythbackend/filetransfer.cpp b/mythtv/programs/mythbackend/filetransfer.cpp
index 0e2de25..35c15a8 100644
--- a/mythtv/programs/mythbackend/filetransfer.cpp
+++ b/mythtv/programs/mythbackend/filetransfer.cpp
@@ -203,7 +203,7 @@ long long FileTransfer::Seek(long long curpos, long long pos, int whence)
 
     Pause();
 
-    if (whence == SEEK_CUR)
+    if (whence == SEEK_CUR && curpos >= 0)
     {
         long long desired = curpos + pos;
         long long realpos = rbuffer->GetReadPosition();
@@ -237,4 +237,9 @@ void FileTransfer::SetTimeout(bool fast)
     rbuffer->SetTimeout(fast);
 }
 
+QString FileTransfer::GetFilename() const
+{
+    return rbuffer->GetFilename();
+}
+
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/programs/mythbackend/filetransfer.h b/mythtv/programs/mythbackend/filetransfer.h
index 4b14420..ea3a45e 100644
--- a/mythtv/programs/mythbackend/filetransfer.h
+++ b/mythtv/programs/mythbackend/filetransfer.h
@@ -49,6 +49,8 @@ class FileTransfer
 
     void SetTimeout(bool fast);
 
+    QString GetFilename() const;
+
   private:
    ~FileTransfer();
 
diff --git a/mythtv/programs/mythbackend/mainserver.cpp b/mythtv/programs/mythbackend/mainserver.cpp
index 05ab960..245268e 100644
--- a/mythtv/programs/mythbackend/mainserver.cpp
+++ b/mythtv/programs/mythbackend/mainserver.cpp
@@ -702,6 +702,13 @@ void MainServer::ProcessRequestWork(MythSocket *sock)
         VERBOSE(VB_IMPORTANT,"Reloading backend settings");
         HandleBackendRefresh(sock);
     }
+    else if (command == "QUERY_CLIENTS")
+    {
+        if (tokens.size() != 1)
+            VERBOSE(VB_IMPORTANT, "Bad QUERY_CLIENTS");
+        else
+            HandleQueryClients(pbs);
+    }
     else if (command == "OK")
     {
         VERBOSE(VB_IMPORTANT, "Got 'OK' out of sequence.");
@@ -5996,4 +6003,41 @@ void MainServer::SendSlaveDisconnectedEvent(
     gCoreContext->dispatch(me);
 }
 
+void MainServer::HandleQueryClients(PlaybackSock *pbsock)
+{
+    QStringList retlist;
+
+    sockListLock.lockForRead();
+
+    retlist << QString::number(playbackList.size() + fileTransferList.size());
+
+    for ( vector<PlaybackSock *>::iterator iter = playbackList.begin();
+        iter != playbackList.end(); ++iter)
+    {
+        PlaybackSock *pbs = *iter;
+
+        retlist << pbs->getHostname();
+        retlist << QString::number(pbs->isSlaveBackend() ? 1 : 0);
+        retlist << QString::number((int)pbs->eventsMode());
+        retlist << QString::number(pbs->getBlockShutdown());
+        retlist << pbs->getIP();
+    }
+
+    for ( vector<FileTransfer *>::iterator iter = fileTransferList.begin();
+        iter != fileTransferList.end(); ++iter)
+    {
+        FileTransfer *ft = *iter;
+        MythSocket *sock = ft->getSocket();
+
+        retlist << sock->peerAddress().toString();
+        retlist << QString::number(2); // 2= file transfer client
+        retlist << QString::number(sock->socket());
+        retlist << QString::number(true);
+        retlist << ft->GetFilename();
+    }
+
+    sockListLock.unlock();
+
+    SendResponse(pbsock->getSocket(), retlist);
+}
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/programs/mythbackend/mainserver.h b/mythtv/programs/mythbackend/mainserver.h
index f0044a7..c5299ee 100644
--- a/mythtv/programs/mythbackend/mainserver.h
+++ b/mythtv/programs/mythbackend/mainserver.h
@@ -172,6 +172,7 @@ class MainServer : public QObject, public MythSocketCBs
     void HandleBlockShutdown(bool blockShutdown, PlaybackSock *pbs);
     void HandleDownloadFile(const QStringList &command, PlaybackSock *pbs);
     void HandleSlaveDisconnectedEvent(const MythEvent &event);
+    void HandleQueryClients(PlaybackSock *);
 
     void SendResponse(MythSocket *pbs, QStringList &commands);
     void SendSlaveDisconnectedEvent(const list<uint> &offlineEncoderIDs,
-- 
1.7.9.5

