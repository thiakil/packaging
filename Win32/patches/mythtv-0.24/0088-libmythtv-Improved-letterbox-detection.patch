From cf697aeddd6839247437f1692ca3c73e4728377a Mon Sep 17 00:00:00 2001
From: Lawrence Rust <lvr@softsystem.co.uk>
Date: Sun, 29 Jan 2012 10:20:39 +0100
Subject: [PATCH 088/285] libmythtv: Improved letterbox detection

Add auto detection and fill of letterboxed widescreen movies.
Reduced rate of frame scanning to reduce CPU load.
Improve optimisation opportunities.

Signed-off-by: Lawrence Rust <lvr@softsystem.co.uk>
---
 mythtv/libs/libmythtv/DetectLetterbox.cpp |  335 ++++++++++++++++-------------
 mythtv/libs/libmythtv/DetectLetterbox.h   |   18 +-
 mythtv/libs/libmythtv/mhi.cpp             |    2 +-
 mythtv/libs/libmythtv/tv_play.cpp         |    2 +-
 4 files changed, 199 insertions(+), 158 deletions(-)

diff --git a/mythtv/libs/libmythtv/DetectLetterbox.cpp b/mythtv/libs/libmythtv/DetectLetterbox.cpp
index 57e659a..50a846c 100644
--- a/mythtv/libs/libmythtv/DetectLetterbox.cpp
+++ b/mythtv/libs/libmythtv/DetectLetterbox.cpp
@@ -1,4 +1,9 @@
 // -*- Mode: c++ -*-
+#include <algorithm>
+using std::min;
+using std::max;
+
+#include <QMutexLocker>
 
 // MythTV headers
 #include "DetectLetterbox.h"
@@ -6,20 +11,22 @@
 #include "videoouttypes.h"
 #include "mythcorecontext.h"
 
-DetectLetterbox::DetectLetterbox(MythPlayer* const player)
+DetectLetterbox::DetectLetterbox(MythPlayer *player)
+:   isDetectLetterbox(false),
+    firstFrameChecked(-1),
+    detectLetterboxDefaultMode(kAdjustFill_Off),
+    detectLetterboxDetectedMode(kAdjustFill_Toggle),
+    detectLetterboxSwitchFrame(0),
+    detectLetterboxPossibleHalfFrame(-1),
+    detectLetterboxPossibleFullFrame(-1),
+    detectLetterboxConsecutiveCounter(0),
+    m_player(player),
+    detectLetterboxLimit(gCoreContext->GetNumSetting("DetectLeterboxLimit", 75))
 {
     int dbAdjustFill = gCoreContext->GetNumSetting("AdjustFill", 0);
     isDetectLetterbox = dbAdjustFill >= kAdjustFill_AutoDetect_DefaultOff;
-    firstFrameChecked = 0;
     detectLetterboxDefaultMode = (AdjustFillMode) max((int) kAdjustFill_Off,
                                  dbAdjustFill - kAdjustFill_AutoDetect_DefaultOff);
-    detectLetterboxSwitchFrame = -1;
-    detectLetterboxPossibleHalfFrame = -1;
-    detectLetterboxPossibleFullFrame = -1;
-    detectLetterboxConsecutiveCounter = 0;
-    detectLetterboxDetectedMode = player->GetAdjustFill();
-    detectLetterboxLimit = gCoreContext->GetNumSetting("DetectLeterboxLimit", 75);
-    m_player = player;
 }
 
 DetectLetterbox::~DetectLetterbox()
@@ -32,28 +39,13 @@ DetectLetterbox::~DetectLetterbox()
  *  If a change is detected detectLetterboxSwitchFrame and
  *  detectLetterboxDetectedMode are set.
  */
+const int CONSECUTIVE_COUNTS = 4;
 void DetectLetterbox::Detect(VideoFrame *frame)
 {
-    unsigned char *buf = frame->buf;
-    int *pitches = frame->pitches;
-    int *offsets = frame->offsets;
-    const int width = frame->width;
-    const int height = frame->height;
-    const long long frameNumber = frame->frameNumber;
-    const int NUMBER_OF_DETECTION_LINES = 3; // How many lines are we looking at
+    const int NUMBER_OF_DETECTION_LINES = 11; // How many lines are we looking at
     const int THRESHOLD = 5; // Y component has to not vary more than this in the bars
     const int HORIZONTAL_THRESHOLD = 4; // How tolerant are we that the image has horizontal edges
-
-    // If the black bars is larger than this limit we switch to Half or Full Mode
-    //    const int fullLimit = (int) (((height - width * 9 / 16) / 2) * detectLetterboxLimit / 100);
-    //    const int halfLimit = (int) (((height - width * 9 / 14) / 2) * detectLetterboxLimit / 100);
-    // If the black bars is larger than this limit we switch to Half or Full Mode
-    const int fullLimit = (int) ((height * (1 - m_player->GetVideoAspect() * 9 / 16) / 2) * detectLetterboxLimit / 100);
-    const int halfLimit = (int) ((height * (1 - m_player->GetVideoAspect() * 9 / 14) / 2) * detectLetterboxLimit / 100);
-
-    const int xPos[] = {width / 4, width / 2, width * 3 / 4};    // Lines to scan for black letterbox edge
-    int topHits = 0, bottomHits = 0, minTop = 0, minBottom = 0, maxTop = 0, maxBottom = 0;
-    int topHit[] = {0, 0, 0}, bottomHit[] = {0, 0, 0};
+    const int VMARGIN = 5; // skip first lines in case of noise in the top/bottom edges
 
     if (!GetDetectLetterbox())
         return;
@@ -61,9 +53,22 @@ void DetectLetterbox::Detect(VideoFrame *frame)
     if (!m_player->getVideoOutput())
         return;
 
+    const long long frameNumber = frame->frameNumber;
+    if (frameNumber < 0)
+    {
+        VERBOSE(VB_PLAYBACK,
+                QString("Detect Letterbox: Strange frame number %1")
+                .arg(frameNumber));
+        return;
+    }
+
+    // If the frame format has been detected then check less frequently
+    if (detectLetterboxSwitchFrame == -1 && (frameNumber % 16) > 0)
+        return;
+
     switch (frame->codec) {
         case FMT_YV12:
-            if (!firstFrameChecked)
+            if (firstFrameChecked == -1)
             {
                 firstFrameChecked = frameNumber;
                 VERBOSE(VB_PLAYBACK,
@@ -71,59 +76,78 @@ void DetectLetterbox::Detect(VideoFrame *frame)
             }
             break;
         default:
-            VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: The source is not "
-                    "a supported frame format (was %1)").arg(frame->codec));
-            isDetectLetterbox = false;
+            if (firstFrameChecked == -1)
+            {
+                firstFrameChecked = frameNumber;
+                VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: The source is not "
+                        "a supported frame format (was %1)").arg(frame->codec));
+            }
             return;
     }
 
-    if (frameNumber < 0)
-    {
-        VERBOSE(VB_PLAYBACK,
-                QString("Detect Letterbox: Strange frame number %1")
-                .arg(frameNumber));
-        return;
-    }
 
-    if (m_player->GetVideoAspect() > 1.5)
+    // If the OSD interactive (MHEG) window is visible then always show fullframe
+    // NB this benefits from a mod to MHIContext::UpdateOSD to make the
+    // interactive window invisible if there's nothing on screen
+    if (m_player->itvVisible)
     {
-        if (detectLetterboxDetectedMode != detectLetterboxDefaultMode)
-        {
-            VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: The source is "
-                    "already in widescreen (aspect: %1)")
-                    .arg(m_player->GetVideoAspect()));
-            detectLetterboxLock.lock();
-            detectLetterboxConsecutiveCounter = 0;
-            detectLetterboxDetectedMode = detectLetterboxDefaultMode;
-            detectLetterboxSwitchFrame = frameNumber;
-            detectLetterboxLock.unlock();
-        }
-        else
+        m_player->LockOSD();
+        OSD *osd = m_player->GetOSD();
+        bool vis = osd && osd->IsWindowVisible(OSD_WIN_INTERACT);
+        m_player->UnlockOSD();
+
+        if (vis)
         {
-            detectLetterboxConsecutiveCounter++;
+            if (detectLetterboxDetectedMode != kAdjustFill_Off)
+            {
+                VERBOSE(VB_PLAYBACK, "Detect Letterbox: OSD forcing full frame");
+                detectLetterboxConsecutiveCounter = CONSECUTIVE_COUNTS;
+                detectLetterboxDetectedMode = kAdjustFill_Off;
+                detectLetterboxSwitchFrame = frameNumber;
+            }
+            else
+            {
+                detectLetterboxConsecutiveCounter++;
+            }
+            return;
         }
-        VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: The source is already "
-                "in widescreen (aspect: %1)")
-                .arg(m_player->GetVideoAspect()));
-        isDetectLetterbox = false;
-        return;
     }
 
+    unsigned char * const buf = frame->buf;
+    int * const pitches = frame->pitches;
+    int * const offsets = frame->offsets;
+    const int width = frame->width;
+    const int height = frame->height;
+    const double aspect = m_player->GetVideoAspect();
+    const bool widescreen = aspect > 1.5;
+
+    // Lines to scan for black letterbox edge
+    int xPos[NUMBER_OF_DETECTION_LINES];
+    for (int i = 0; i < NUMBER_OF_DETECTION_LINES; ++i)
+        xPos[i] =  (width * (i+1)) / (NUMBER_OF_DETECTION_LINES + 1);
+
     // Establish the level of light in the edge
     int averageY = 0;
     for (int detectionLine = 0;
          detectionLine < NUMBER_OF_DETECTION_LINES;
          detectionLine++)
     {
-        averageY += buf[offsets[0] + 5 * pitches[0]            + xPos[detectionLine]];
-        averageY += buf[offsets[0] + (height - 6) * pitches[0] + xPos[detectionLine]];
+        averageY += buf[offsets[0] + VMARGIN * pitches[0]                + xPos[detectionLine]];
+        averageY += buf[offsets[0] + (height - VMARGIN - 1) * pitches[0] + xPos[detectionLine]];
     }
     averageY /= NUMBER_OF_DETECTION_LINES * 2;
-    if (averageY > 64) // To bright to be a letterbox border
-        averageY = 0;
+    if (averageY > 40) // Too bright to be a letterbox border
+        averageY = 16;
+    if (averageY < THRESHOLD)
+        averageY = THRESHOLD;
+
+    int topHit[NUMBER_OF_DETECTION_LINES] = {0};
+    int bottomHit[NUMBER_OF_DETECTION_LINES] = {0};
 
     // Scan the detection lines
-    for (int y = 5; y < height / 4; y++) // skip first pixels incase of noise in the edge
+    int topHits = 0, bottomHits = 0;
+    int minTop = 0, minBottom = 0, maxTop = 0, maxBottom = 0;
+    for (int y = VMARGIN; y < height / 4; y++)
     {
         for (int detectionLine = 0;
              detectionLine < NUMBER_OF_DETECTION_LINES;
@@ -166,106 +190,119 @@ void DetectLetterbox::Detect(VideoFrame *frame)
             break;
         }
     }
-    if (topHits != NUMBER_OF_DETECTION_LINES) maxTop = height / 4;
-    if (!minTop) minTop = height / 4;
-    if (bottomHits != NUMBER_OF_DETECTION_LINES) maxBottom = height / 4;
-    if (!minBottom) minBottom = height / 4;
 
-    bool horizontal = ((minTop && maxTop - minTop < HORIZONTAL_THRESHOLD) &&
-                       (minBottom && maxBottom - minBottom < HORIZONTAL_THRESHOLD));
+    // Check for black frame
+    if ((minTop == 0 && maxTop == 0) || (minBottom == 0 && maxBottom == 0))
+        return;
+
+    // If the black bars are larger than this limit we switch to Half or Full Mode
+    int fullLimit, halfLimit;
+    if (widescreen)
+    {
+        const double kZoomHalf = 7.0 / 6, kZoomFull = 4.0 / 3;
+        fullLimit = (int) ((height * (1 - 1 / (kZoomFull * kZoomFull)) * 0.5) * (detectLetterboxLimit / 100.0));
+        halfLimit = (int) ((height * (1 - 1 / (kZoomHalf * kZoomHalf)) * 0.5) * (detectLetterboxLimit / 100.0));
+    }
+    else
+    {
+        fullLimit = (int) ((height * (1 - aspect * (9.0 / 16)) * 0.5) * (detectLetterboxLimit / 100.0));
+        halfLimit = (int) ((height * (1 - aspect * (9.0 / 14)) * 0.5) * (detectLetterboxLimit / 100.0));
+    }
+
+    QMutexLocker lock(&detectLetterboxLock);
 
     if (detectLetterboxSwitchFrame > frameNumber) // user is reversing
     {
-        detectLetterboxLock.lock();
         detectLetterboxDetectedMode = m_player->GetAdjustFill();
         detectLetterboxSwitchFrame = -1;
         detectLetterboxPossibleHalfFrame = -1;
         detectLetterboxPossibleFullFrame = -1;
-        detectLetterboxLock.unlock();
     }
 
     if (minTop < halfLimit || minBottom < halfLimit)
         detectLetterboxPossibleHalfFrame = -1;
-    if (minTop < fullLimit || minBottom < fullLimit)
-        detectLetterboxPossibleFullFrame = -1;
-
-    if (detectLetterboxDetectedMode != kAdjustFill_Full)
+    else if (detectLetterboxPossibleHalfFrame == -1)
     {
-        if (detectLetterboxPossibleHalfFrame == -1 &&
-            minTop > halfLimit && minBottom > halfLimit) {
+        if (detectLetterboxDetectedMode != kAdjustFill_Full)
             detectLetterboxPossibleHalfFrame = frameNumber;
-        }
-    }
-    else
-    {
-        if (detectLetterboxPossibleHalfFrame == -1 &&
-            minTop < fullLimit && minBottom < fullLimit) {
+        else if (minTop < fullLimit && minBottom < fullLimit)
             detectLetterboxPossibleHalfFrame = frameNumber;
-        }
     }
-    if (detectLetterboxPossibleFullFrame == -1 &&
-        minTop > fullLimit && minBottom > fullLimit)
+
+    if (minTop < fullLimit || minBottom < fullLimit)
+        detectLetterboxPossibleFullFrame = -1;
+    else if (detectLetterboxPossibleFullFrame == -1)
         detectLetterboxPossibleFullFrame = frameNumber;
 
-    if ( maxTop < halfLimit || maxBottom < halfLimit) // Not to restrictive when switching to off
+    bool flatTop = (maxTop - minTop) < HORIZONTAL_THRESHOLD;
+    bool flatBot = (maxBottom - minBottom) < HORIZONTAL_THRESHOLD;
+
+    if (flatTop && minTop >= fullLimit &&
+        flatBot && minBottom >= fullLimit)
     {
-        // No Letterbox
-        if (detectLetterboxDetectedMode != detectLetterboxDefaultMode)
+        // Letterbox
+        detectLetterboxPossibleHalfFrame = -1;
+        if (detectLetterboxDetectedMode != kAdjustFill_Full)
         {
-            VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Non Letterbox "
-                    "detected on line: %1 (limit: %2)")
-                    .arg(min(maxTop, maxBottom)).arg(halfLimit));
-            detectLetterboxLock.lock();
+            VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Letterbox "
+                    "detected on line:%1 (limit:%2..%3) frame:%4 Y:%5")
+                    .arg(min(minTop,minBottom)).arg(halfLimit).arg(fullLimit)
+                    .arg(detectLetterboxPossibleFullFrame).arg(averageY));
             detectLetterboxConsecutiveCounter = 0;
-            detectLetterboxDetectedMode = detectLetterboxDefaultMode;
-            detectLetterboxSwitchFrame = frameNumber;
-            detectLetterboxLock.unlock();
+            detectLetterboxDetectedMode = kAdjustFill_Full;
+            detectLetterboxSwitchFrame = detectLetterboxPossibleFullFrame;
         }
         else
         {
             detectLetterboxConsecutiveCounter++;
         }
     }
-    else if (horizontal && minTop > halfLimit && minBottom > halfLimit &&
-             maxTop < fullLimit && maxBottom < fullLimit)
+    else if ( (flatTop || flatBot) &&
+        minTop >= halfLimit &&
+        minBottom >= halfLimit)
     {
         // Letterbox (with narrow bars)
-        if (detectLetterboxDetectedMode != kAdjustFill_Half)
+        detectLetterboxPossibleFullFrame = -1;
+        if (detectLetterboxPossibleHalfFrame == -1)
+            detectLetterboxConsecutiveCounter = 0;
+        else if (detectLetterboxDetectedMode != kAdjustFill_Half)
         {
             VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Narrow Letterbox "
-                    "detected on line: %1 (limit: %2) frame: %3")
-                    .arg(minTop).arg(halfLimit)
-                    .arg(detectLetterboxPossibleHalfFrame));
-            detectLetterboxLock.lock();
+                    "detected on line:%1 (limit:%2..%3) frame:%4 Y:%5")
+                    .arg(min(minTop,minBottom)).arg(halfLimit).arg(fullLimit)
+                    .arg(detectLetterboxPossibleHalfFrame).arg(averageY));
             detectLetterboxConsecutiveCounter = 0;
-            if (detectLetterboxDetectedMode == kAdjustFill_Full &&
-                detectLetterboxSwitchFrame != -1) {
-                // Do not change switch frame if switch to Full mode has not been executed yet
-            }
-            else
+            // Do not change switch frame if switch to Full mode has not been executed yet
+            if (detectLetterboxDetectedMode != kAdjustFill_Full ||
+                detectLetterboxSwitchFrame == -1)
+            {
                 detectLetterboxSwitchFrame = detectLetterboxPossibleHalfFrame;
+            }
             detectLetterboxDetectedMode = kAdjustFill_Half;
-            detectLetterboxLock.unlock();
         }
         else
         {
             detectLetterboxConsecutiveCounter++;
         }
     }
-    else if (horizontal && minTop > fullLimit && minBottom > fullLimit)
+    // Not too restrictive when switching to off
+    else if ( (minTop > 0 && minTop < halfLimit) ||
+        (minBottom > 0 && minBottom < halfLimit) )
     {
-        // Letterbox
+        // No Letterbox
         detectLetterboxPossibleHalfFrame = -1;
-        if (detectLetterboxDetectedMode != kAdjustFill_Full)
+        detectLetterboxPossibleFullFrame = -1;
+        const AdjustFillMode mode = widescreen  ?
+            kAdjustFill_Off : detectLetterboxDefaultMode;
+        if (detectLetterboxDetectedMode != mode)
         {
-            VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Detected Letterbox "
-                    "on line: %1 (limit: %2) frame: %3").arg(minTop)
-                    .arg(fullLimit).arg(detectLetterboxPossibleFullFrame));
-            detectLetterboxLock.lock();
+            VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Full frame %1 "
+                    "detected on line:%2 (limit:%3..%4) Y:%5")
+                    .arg(widescreen ? "WS" : "4:3")
+                    .arg(min(minTop, minBottom)).arg(halfLimit).arg(fullLimit).arg(averageY));
             detectLetterboxConsecutiveCounter = 0;
-            detectLetterboxDetectedMode = kAdjustFill_Full;
-            detectLetterboxSwitchFrame = detectLetterboxPossibleFullFrame;
-            detectLetterboxLock.unlock();
+            detectLetterboxDetectedMode = mode;
+            detectLetterboxSwitchFrame = frameNumber;
         }
         else
         {
@@ -274,7 +311,7 @@ void DetectLetterbox::Detect(VideoFrame *frame)
     }
     else
     {
-        if (detectLetterboxConsecutiveCounter <= 3)
+        if (detectLetterboxConsecutiveCounter < CONSECUTIVE_COUNTS)
             detectLetterboxConsecutiveCounter = 0;
     }
 }
@@ -289,43 +326,49 @@ void DetectLetterbox::SwitchTo(VideoFrame *frame)
     if (!GetDetectLetterbox())
         return;
 
-    if (detectLetterboxSwitchFrame != -1)
+    QMutexLocker lock(&detectLetterboxLock);
+
+    if (detectLetterboxSwitchFrame == -1)
+        return;
+
+    if (detectLetterboxSwitchFrame > frame->frameNumber)
+        return;
+
+    if (m_player->GetAdjustFill() == detectLetterboxDetectedMode)
+        return;
+
+    if (detectLetterboxConsecutiveCounter >= CONSECUTIVE_COUNTS)
     {
-        detectLetterboxLock.lock();
-        if (detectLetterboxSwitchFrame <= frame->frameNumber &&
-            detectLetterboxConsecutiveCounter > 3)
-        {
-            if (m_player->GetAdjustFill() != detectLetterboxDetectedMode)
-            {
-                VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Switched to %1 "
-                        "on frame %2 (%3)").arg(detectLetterboxDetectedMode)
-                        .arg(frame->frameNumber).arg(detectLetterboxSwitchFrame));
-                m_player->getVideoOutput()->ToggleAdjustFill(detectLetterboxDetectedMode);
-                m_player->ReinitOSD();
-            }
-            detectLetterboxSwitchFrame = -1;
-        }
-        else if (detectLetterboxSwitchFrame <= frame->frameNumber)
-            VERBOSE(VB_PLAYBACK,
-                    QString("Detect Letterbox: Not Switched to %1 on frame %2 "
-                            "(%3) Not enough consecutive detections (%4)")
-                    .arg(detectLetterboxDetectedMode)
-                    .arg(frame->frameNumber).arg(detectLetterboxSwitchFrame)
-                    .arg(detectLetterboxConsecutiveCounter));
-
-        detectLetterboxLock.unlock();
+        VERBOSE(VB_PLAYBACK, QString("Detect Letterbox: Switched to %1 "
+                "on frame %2 (%3)").arg(toString(detectLetterboxDetectedMode))
+                .arg(frame->frameNumber).arg(detectLetterboxSwitchFrame));
+
+        m_player->getVideoOutput()->ToggleAdjustFill(detectLetterboxDetectedMode);
+        m_player->ReinitOSD();
+        detectLetterboxSwitchFrame = -1;
+    }
+    else
+    {
+        VERBOSE(VB_PLAYBACK+VB_EXTRA,
+                QString("Detect Letterbox: Not Switched to %1 on frame %2 "
+                        "(%3) Not enough consecutive detections (%4)")
+                .arg(toString(detectLetterboxDetectedMode))
+                .arg(frame->frameNumber).arg(detectLetterboxSwitchFrame)
+                .arg(detectLetterboxConsecutiveCounter));
     }
 }
 
 void DetectLetterbox::SetDetectLetterbox(bool detect)
 {
+    QMutexLocker lock(&detectLetterboxLock);
+
     isDetectLetterbox = detect;
     detectLetterboxSwitchFrame = -1;
-    detectLetterboxDetectedMode = m_player->GetAdjustFill();
-    firstFrameChecked = 0;
+    detectLetterboxDetectedMode = kAdjustFill_Toggle;
+    firstFrameChecked = -1;
 }
 
-bool DetectLetterbox::GetDetectLetterbox()
+bool DetectLetterbox::GetDetectLetterbox() const
 {
     return isDetectLetterbox;
 }
diff --git a/mythtv/libs/libmythtv/DetectLetterbox.h b/mythtv/libs/libmythtv/DetectLetterbox.h
index a1a287c..e5cfad6 100644
--- a/mythtv/libs/libmythtv/DetectLetterbox.h
+++ b/mythtv/libs/libmythtv/DetectLetterbox.h
@@ -2,35 +2,33 @@
 
 #include "mythplayer.h"
 
-using namespace std;
-
 class MythPlayer;
 
 class MPUBLIC DetectLetterbox
 {
 public:
-    DetectLetterbox(MythPlayer* const player);
+    DetectLetterbox(MythPlayer *player);
     ~DetectLetterbox();
     void SetDetectLetterbox(bool detect);
-    bool GetDetectLetterbox();
+    bool GetDetectLetterbox() const;
     void Detect(VideoFrame *frame);
     void SwitchTo(VideoFrame *frame);
 
 private:
     bool isDetectLetterbox;
-    int firstFrameChecked;
+    long long firstFrameChecked;
 
     AdjustFillMode detectLetterboxDefaultMode;
-    AdjustFillMode detectLetterboxDetectedMode; // Wich mode was last detected
-    long long detectLetterboxSwitchFrame; // On wich frame was the mode switch detected
+    AdjustFillMode detectLetterboxDetectedMode; // Which mode was last detected
+    long long detectLetterboxSwitchFrame; // On which frame the mode switch was detected
     long long detectLetterboxPossibleHalfFrame;
     long long detectLetterboxPossibleFullFrame;
     int detectLetterboxConsecutiveCounter;
 
-    MythPlayer *m_player;
+    MythPlayer * const m_player;
 
-    int detectLetterboxLimit;
-    QMutex detectLetterboxLock;
+    int const detectLetterboxLimit;
+    mutable QMutex detectLetterboxLock;
 };
 
 /* vim: set expandtab tabstop=4 shiftwidth=4: */
diff --git a/mythtv/libs/libmythtv/mhi.cpp b/mythtv/libs/libmythtv/mhi.cpp
index d6a947f..032796d 100644
--- a/mythtv/libs/libmythtv/mhi.cpp
+++ b/mythtv/libs/libmythtv/mhi.cpp
@@ -652,7 +652,7 @@ void MHIContext::UpdateOSD(InteractiveScreen *osdWindow,
     }
     osdWindow->OptimiseDisplayedArea();
     // N.B. bypasses OSD class hence no expiry set
-    osdWindow->SetVisible(true);
+    osdWindow->SetVisible(!m_display.empty());
 }
 
 void MHIContext::GetInitialStreams(int &audioTag, int &videoTag)
diff --git a/mythtv/libs/libmythtv/tv_play.cpp b/mythtv/libs/libmythtv/tv_play.cpp
index 2bafb06..55dd02b 100644
--- a/mythtv/libs/libmythtv/tv_play.cpp
+++ b/mythtv/libs/libmythtv/tv_play.cpp
@@ -9641,7 +9641,7 @@ void TV::OSDDialogEvent(int result, QString text, QString action)
     }
     else if (action == "AUTODETECT_FILL")
     {
-        actx->player->detect_letter_box->SetDetectLetterbox(!actx->player->detect_letter_box->GetDetectLetterbox());
+        actx->player->detect_letter_box->SetDetectLetterbox(true);
     }
     else if (action == "GUIDE")
         EditSchedule(actx, kScheduleProgramGuide);
-- 
1.7.9.5

